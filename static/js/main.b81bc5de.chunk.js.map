{"version":3,"sources":["res/img/d4.svg","res/img/perspective-dice-six.svg","res/img/dice-eight-faces-eight.svg","res/img/d12.svg","res/img/dice-twenty-faces-twenty.svg","res/img/rolling-dices.svg","data_classes/DieDefinition.js","utils/GenericFunctions.js","data_classes/DieFace.js","data_classes/DieFaceCount.js","utils/StatisticalFunctions.js","data_classes/NumericDieDefinition.js","data_classes/ThresholdDieDefinition.js","data_classes/DiceCount.js","data_classes/DicePool.js","actions/StatisticsActions.js","actions/DiePoolActions.js","components/NumberIncrementDecrementer.js","components/DiceChooserEntry.js","components/DicePoolChooserComponent.js","containers/DicePoolChooserContainer.js","components/DiceChooserComponent.js","containers/DiceChooserContainer.js","components/StatsComponent.js","containers/StatsContainer.js","App.js","serviceWorker.js","reducers/DicePoolReducer.js","reducers/StatisticsReducer.js","actions/DieDefinitionActions.js","reducers/DiceDefinitionReducer.js","reducers/index.js","index.js","res/img/d10.svg"],"names":["module","exports","__webpack_require__","p","DieDefinition","_ref","dieType","explodeThreshold","name","image","Object","classCallCheck","this","clone","bind","roll","countFaces","getNumFaces","Error","Array","from","values","reduce","accumulator","cur","coalesce","value","valueIfNull","undefined","DieFace","primaryValue","secondaryValues","toString","map","entry","DieFaceCount","dieFace","count","generateDieResult","minValue","maxValue","Math","floor","random","NumericDieDefinition","props","_this","possibleConstructorReturn","getPrototypeOf","call","objectSpread","numSides","concat","d4Image","d6Image","d8Image","d10Image","d12Image","d20Image","genericDiceImage","result","diceCounts","Map","_","range","forEach","face","has","get","set","ThresholdDieDefinition","threshold","assertThisInitialized","numFacesReachingThreshold","numFacesBelowThreshold","faceReachingThreshold","faceNotReachingThreshold","DieCount","DicePool","staticBonus","staticSecondaryBonuses","slice","addDice","removeDice","dieDefinition","associatedEntry","find","newCount","push","DiceCount","SET_STATISTICS","RESET_STATISTICS","requestRecalculate","dispatch","_store$getState","store","getState","probabilities","currentDicePool","definitions","dice","length","filter","_ref2","curDefinition","fill","curDie","idx","newProbabilities","curDieFaceCount","totalFaces","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","faceCount","curFaceCount","iterations","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","entries","_ref5","_ref4","slicedToArray","key","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","newValue","newProbability","probabilityThisStage","produceResultsSemiIterative","dicePoolStore","diceDefinitionStore","orderedResults","keys","sort","a","b","reverse","cumulativeProbabilities","accumulatedProbability","curResult","newAccumulatedProbability","type","dispatchSetStatistics","ADD_DIE_TO_POOL","REMOVE_DIE_FROM_POOL","SAVE_CURRENT_POOL","CLEAR_COUNTS","SET_CURRENT_POOL","initializeDicePools","defaultDefinitions","toConsumableArray","arkhamD6","arkhamCurseD6","arkhamBlessD6","defineThresholdDice","definition","defineBasicNumericDice","processDefaultDiceDefinitions","dicePools","dndPool","defineDndPool","arkhamPool","includes","defineArkhamPool","preset1","diceDefinitions","currentName","requestAddDieToPool","Promise","resolve","dispatchAddDieToPool","then","requestSaveCurrentPool","newPoolName","dispatchSaveCurrentPool","requestSetCurrentPool","poolName","dispatchSetCurrentPool","requestClearCounts","requestRemoveDieToPool","dispatchRemoveDieFromPool","abs","NumberIncrementDecrementer","_this$props","onChange","min","max","react_default","createElement","style","textAlign","Icon","display","size","onClick","Label","className","Component","DiceChooserEntry","onChangeCount","Fragment","Image","src","NumberIncrementDecrementer_NumberIncrementDecrementer","DicePoolChooserComponent","getPresetName","isRowEnabled","rowNum","_this2","width","onClearCounts","textDecoration","Grid","columns","divided","height","rowName","Column","Row","Button","onSetDicePool","disabled","onSaveDicePool","connect","state","_state$dicePoolStore","dicePool","currentDicePoolName","DiceChooserComponent","countChange","console","log","_this$props2","row1","DiceChooserEntry_DiceChooserEntry","DicePoolChooserContainer","probabilitiesOfInterest","mode","labels","data","x","y","labelData","xOffset","label","toFixed","react_vis_es","yType","xType","animation","allowOffsetToBeReversed","orientation","colorType","_state$statisticsStor","statisticsStore","isCalculationCurrent","onRequestRecalculate","StatsComponent","App","StatsContainer","DiceChooserContainer","Boolean","window","location","hostname","match","initializeState","initializationResults","currentPoolCopy","initialState","ADD_DEFINITION","MODIFY_DEFINITION","DELETE_DEFINITION","combineReducers","action","poolCopy","updatedPools","updatedPool","entryCopy","error","updatedDicePool","updatedDefinitions","updatedDicePools","arguments","finalState","d","__webpack_exports__","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b81bc5de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/d4.47a22d03.svg\";","module.exports = __webpack_public_path__ + \"static/media/perspective-dice-six.d746d684.svg\";","module.exports = __webpack_public_path__ + \"static/media/dice-eight-faces-eight.6e85915b.svg\";","module.exports = __webpack_public_path__ + \"static/media/d12.bfe5934e.svg\";","module.exports = __webpack_public_path__ + \"static/media/dice-twenty-faces-twenty.aeb518c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/rolling-dices.79d6d7d5.svg\";","/**\r\n * Definition of an individual die, including the various faces that compose it and the count of each face.\r\n * Assumes each side is equally likely (i.e. a fair die). Note that having more than one copy of a face on different die sides\r\n * will increase its likelihood proportionally \r\n */\r\nexport default class DieDefinition {\r\n    constructor( { dieType, explodeThreshold, name, image }) {\r\n        this.dieType = dieType;\r\n        this.name = name;\r\n        this.image = image;\r\n        /**\r\n         * If provided, the die will \"explode\" when the provided number or higher is rolled,\r\n         * adding the results of the subsequent roll to the one that caused the explosion \r\n         * (And possibly exploding again). This will typically be only the highest possible result on the die\r\n         * But, there are some games that might have explosions on, say, a 5 or a 6 on a d6.\r\n         */\r\n        \r\n        this.explodeThreshold = explodeThreshold;\r\n\r\n\r\n\r\n        this.clone = this.clone.bind(this);\r\n        this.roll = this.roll.bind(this);\r\n        this.countFaces = this.countFaces.bind(this);\r\n        this.getNumFaces = this.getNumFaces.bind(this);\r\n    }\r\n\r\n    clone() {\r\n        return new DieDefinition( { \r\n            dieType : this.dieType, \r\n            explodeThreshold : this.explodeThreshold, \r\n            name : this.name,\r\n            image : this.image\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Performs a single roll, providing a dice face as a result.\r\n     */\r\n    roll() {\r\n        return new Error(\"Not implemented\");\r\n    }\r\n\r\n     /**\r\n     * Enumerates all possible die faces, returning an array of DieFaceCount objects.\r\n     */\r\n    countFaces() {\r\n        //TODO: Consider caching this.\r\n        return new Error(\"Not implemented\");\r\n    }\r\n\r\n    /**\r\n     * Enumerates all possible die faces, returning an array of DieFaceCount objects.\r\n     */\r\n    getNumFaces() {\r\n        //If necessary, default is to enumerate faces and return that.\r\n        return Array.from(this.countFaces().values()).reduce( (accumulator, cur) => {\r\n            return accumulator + cur;\r\n        }, 0);\r\n    }\r\n}","export function coalesce(value, valueIfNull) {\r\n    return value === null || value === undefined ? valueIfNull : value;\r\n}","import { coalesce } from \"../utils/GenericFunctions\";\r\n\r\n/**\r\n * Details of an individual face of a die.\r\n * Often, this will just be something like a '4', which is the primary value\r\n * But, it could have multiple results, like '1 energy and one dollar'\r\n * As a rule, if this represents some amount of a \"primary currency\" or expected product of a die roll,\r\n * just provide a primary value and leave interpretation of what it means to the user.\r\n */\r\nexport default class DieFace {\r\n    constructor({ primaryValue, secondaryValues, name }) {\r\n        this.primaryValue = coalesce(primaryValue, []);\r\n        //If provided, an array of \r\n        this.secondaryValues = coalesce(secondaryValues, []);\r\n        if(name === undefined && \r\n            primaryValue !== undefined) {\r\n            this.name = primaryValue.toString();\r\n        }\r\n        else {\r\n            this.name = name;\r\n        }\r\n\r\n        this.clone = this.clone.bind(this);\r\n    }\r\n\r\n    clone() {\r\n        return new DieFace( { \r\n            primaryValue : this.primaryValue,\r\n            secondaryValues : this.secondaryValues.map( entry => { return entry.clone()}),\r\n            name : this.name\r\n        });\r\n    }\r\n}","import DieFace from \"./DieFace\";\r\n\r\n/**\r\n * Simple tuple-like definition for tracking the count of certain die faces.\r\n */\r\nexport default class DieFaceCount {\r\n    constructor({dieFace, count}) {\r\n        this.dieFace = dieFace;\r\n        this.count = count;\r\n\r\n        this.clone = this.clone.bind(this);\r\n    }\r\n\r\n    clone() {\r\n        return new DieFaceCount( { \r\n            dieFace : this.dieFace.clone(),\r\n            count : this.count\r\n        });\r\n    }\r\n}","export function generateDieResult(minValue, maxValue) {\r\n    return Math.floor(Math.random( maxValue - minValue + 1 ) ) + minValue;\r\n}","import DieDefinition from \"./DieDefinition\"\r\nimport DieFaceCount from \"./DieFaceCount\"\r\nimport { generateDieResult } from \"../utils/StatisticalFunctions\";\r\nimport DieFace from \"./DieFace\";\r\nimport _ from \"lodash\"\r\nimport d4Image from '../res/img/d4.svg';\r\nimport d6Image from '../res/img/perspective-dice-six.svg';\r\nimport d8Image from '../res/img/dice-eight-faces-eight.svg';\r\nimport d10Image from '../res/img/d10.svg';\r\nimport d12Image from '../res/img/d12.svg';\r\nimport d20Image from '../res/img/dice-twenty-faces-twenty.svg';\r\nimport d100Image from '../res/img/d10.svg';\r\nimport genericDiceImage from '../res/img/rolling-dices.svg'\r\n\r\n/**\r\n * A die with integer faces from some value to some value, in steps of 1.\r\n */\r\nexport default class NumericDieDefinition extends DieDefinition {\r\n    constructor(props) {\r\n        super( { dieType : 'numeric', ...props});\r\n        const { minValue, maxValue, numSides} = props;\r\n\r\n        if(numSides) {\r\n            //If the simpler specification (num sides) is provided, assume the min and max is 1 to nSides\r\n            this.minValue = 1;\r\n            this.maxValue = numSides;\r\n        }\r\n        else {\r\n            this.minValue = minValue;\r\n            this.maxValue = maxValue;\r\n        }\r\n        if(props.name === undefined) {\r\n            this.name = `d${this.maxValue}`;\r\n        }\r\n\r\n        if(!this.image) {\r\n            switch(this.maxValue) {\r\n                case 4:\r\n                    this.image = d4Image;\r\n                    break;\r\n                case 6:\r\n                    this.image = d6Image;\r\n                    break;\r\n                case 8:\r\n                    this.image = d8Image;\r\n                    break;\r\n                case 10:\r\n                case 100:\r\n                    this.image = d10Image;\r\n                    break;\r\n                case 12:\r\n                    this.image = d12Image;\r\n                    break;\r\n                case 20:\r\n                    this.image = d20Image;\r\n                    break;\r\n                default:\r\n                    this.image = genericDiceImage;\r\n                    break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    clone() {\r\n        return new NumericDieDefinition( { \r\n            minValue : this.minValue,\r\n            maxValue : this.maxValue,\r\n            numSides : this.numSides,\r\n            explodeThreshold : this.explodeThreshold, \r\n            name : this.name\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Performs a single roll, providing a dice face as a result.\r\n     */\r\n    roll() {\r\n        const result = generateDieResult(this.minValue, this.maxValue);\r\n        return new DieFace({ primaryValue : result});\r\n    }\r\n\r\n     /**\r\n     * Enumerates all possible die faces, returning a map of DieFaceCount objects.\r\n     */\r\n    countFaces() {\r\n        const diceCounts = new Map();\r\n        _.range(this.minValue, this.maxValue + 1).forEach ( value => {\r\n            const face = new DieFace({ primaryValue : value});\r\n            if(diceCounts.has(face.name)) {\r\n                diceCounts.get(face.name).count++;\r\n            }\r\n            else {\r\n                diceCounts.set(face.name, new DieFaceCount({ dieFace : face, count : 1}));\r\n            }\r\n        })\r\n        return diceCounts;\r\n    }\r\n\r\n    getNumFaces() {\r\n        return this.maxValue - this.minValue + 1;\r\n    }\r\n}","import NumericDieDefinition from \"./NumericDieDefinition\";\r\nimport { generateDieResult } from \"../utils/StatisticalFunctions\";\r\nimport DieFace from \"./DieFace\"\r\n\r\n/**\r\n * A typical numeric die (i.e. a d8) that doesn't return 1, 2, 3, 4 etc... but rather\r\n * returns 1 if the basic result is equal to or above a threshold. i.e. 7 or 8 gives 1, otherwise 0.\r\n * (Note that it is possible to represent a die with multiple thresholds. \r\n * i.e. 3 faces give 0, 2 faces give 1, and one face gives 2. \r\n * But, that is currently being handled by Symbolic Die) \r\n */\r\nexport default class ThresholdDieDefinition extends NumericDieDefinition {\r\n    constructor(props) {\r\n        super(props);\r\n        const { threshold } = props;\r\n        this.threshold = threshold;\r\n        this.clone = this.clone.bind(this);\r\n    }\r\n\r\n    clone() {\r\n        return new ThresholdDieDefinition( { \r\n            minValue : this.minValue,\r\n            maxValue : this.maxValue,\r\n            numSides : this.numSides,\r\n            explodeThreshold : this.explodeThreshold, \r\n            name : this.name,\r\n            threshold : this.threshold\r\n        });\r\n    }\r\n\r\n    roll() {\r\n        const numericRoll = generateDieResult(this.minValue, this.maxValue);\r\n        const result = numericRoll >= this.threshold ? 1 : 0;\r\n        return new DieFace({ primaryValue : result});\r\n    }\r\n\r\n     /**\r\n     * Enumerates all possible die faces, returning a map of DieFaceCount objects.\r\n     */\r\n    enumerateFaces() {\r\n        const diceCounts = new Map();\r\n\r\n        const numFacesReachingThreshold = this.maxValue - this.threshold + 1;\r\n        const numFacesBelowThreshold = this.threshold - this.minValue;\r\n\r\n        const faceReachingThreshold = new DieFace({ primaryValue : 1});\r\n        const faceNotReachingThreshold = new DieFace({ primaryValue : 0});\r\n\r\n        diceCounts.set(faceReachingThreshold.name, numFacesReachingThreshold);\r\n        diceCounts.set(faceNotReachingThreshold.name, numFacesBelowThreshold);\r\n        return diceCounts;\r\n    }\r\n}","/**\r\n * Simple value class that pairs a die definition name and its count (within a pool).\r\n */\r\nexport default class DieCount {\r\n    constructor({ name, count }) {\r\n        this.name = name;\r\n        this.count = count;\r\n\r\n        this.clone = this.clone.bind(this);\r\n    }\r\n\r\n    clone() {\r\n        return new DieCount( { \r\n            name : this.name,\r\n            count : this.count\r\n        });\r\n    }\r\n}","import { coalesce } from \"../utils/GenericFunctions\";\r\nimport DiceCount from \"./DiceCount\"\r\n\r\nexport default class DicePool {\r\n    constructor({ diceCounts, staticBonus, staticSecondaryBonuses, name }) {\r\n        this.staticBonus = coalesce(staticBonus, 0);\r\n        this.staticSecondaryBonuses = staticSecondaryBonuses;\r\n        this.name = name;\r\n        this.diceCounts = diceCounts.slice();\r\n        this.addDice = this.addDice.bind(this);\r\n        this.removeDice = this.removeDice.bind(this);\r\n        this.clone = this.clone.bind(this);\r\n    }\r\n\r\n    addDice(dieDefinition, count) {\r\n        count = coalesce(count, 1);\r\n        const associatedEntry = this.diceCounts.find( entry => entry.name === dieDefinition.name);\r\n        const newCount = (associatedEntry ? associatedEntry.count : 0)  + count;\r\n        if(associatedEntry) {\r\n            associatedEntry.count++;\r\n        }\r\n        else {\r\n            this.diceCounts.push(new DiceCount({ name : dieDefinition.name, count : newCount}));\r\n        }\r\n    }\r\n\r\n    removeDice(dieDefinition, count) {\r\n        const associatedEntry = this.diceCounts.find( entry => entry.name === dieDefinition.name);\r\n        const newCount = (associatedEntry ? associatedEntry.count : 0)  - count;\r\n        if(associatedEntry) {\r\n            associatedEntry.count = newCount;\r\n        }\r\n        else {\r\n            this.diceCounts.push(new DiceCount({ name : dieDefinition.name, count : newCount}));\r\n        }\r\n    }\r\n\r\n    clone() {\r\n        const diceCounts = this.diceCounts.map( entry => {\r\n            return entry.clone();\r\n        }\r\n        );\r\n        return new DicePool({\r\n            diceCounts,\r\n            staticBonus : this.staticBonus,\r\n            staticSecondaryBonuses : this.staticSecondaryBonuses,\r\n            name : this.name\r\n        });\r\n    }\r\n}","import { store } from \"..\";\r\nimport { isBuffer } from \"util\";\r\n\r\nexport const SET_STATISTICS = 'SET_STATISTICS';\r\nexport const RESET_STATISTICS = 'RESET_STATISTICS';\r\n\r\nfunction dispatchSetStatistics(probabilities, cumulativeProbabilities) {\r\n    return {\r\n        type : SET_STATISTICS,\r\n        probabilities,\r\n        cumulativeProbabilities\r\n    }\r\n}\r\n\r\nfunction dispatchResetStatistics() {\r\n    return {\r\n        type : RESET_STATISTICS\r\n    }\r\n}\r\n\r\nexport function requestRecalculate() {\r\n    return (dispatch) => {\r\n        const { \r\n            dicePoolStore : { currentDicePool },\r\n            diceDefinitionStore : { definitions }\r\n        } = store.getState();\r\n    \r\n        //For now, assuming numeric dice.\r\n        //The procedure here will be to combine dice at each stage\r\n        //so as to take the probabilities from the previous stage and produce new\r\n        //probabilities in an iterative process.\r\n    \r\n        const probabilities = produceResultsSemiIterative(\r\n            currentDicePool, definitions);\r\n    \r\n        if(probabilities === undefined) {\r\n            return;\r\n        }\r\n    \r\n        //Now, go ahead and calculate cumulative probabilities.\r\n    \r\n        const orderedResults = Array.from(probabilities.keys()).sort( (a,b) => {\r\n            if(a < b) {\r\n                return -1;\r\n            }\r\n            else if(a > b) {\r\n                return 1;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }).reverse();\r\n    \r\n        const cumulativeProbabilities = new Map();\r\n    \r\n        orderedResults.reduce( (accumulatedProbability, curResult) => {\r\n            const curResultProbability = probabilities.get(curResult);\r\n            const newAccumulatedProbability = curResultProbability + \r\n                accumulatedProbability;\r\n            cumulativeProbabilities.set(curResult, newAccumulatedProbability);\r\n            return newAccumulatedProbability;\r\n        }, 0 );\r\n        return dispatch( dispatchSetStatistics(probabilities, cumulativeProbabilities));\r\n    }\r\n}\r\n\r\nconst MAX_DIE = 10;\r\n\r\n// function produceResultsNaive() {\r\n//     const counts = new Map();\r\n//     for(let i = 1; i <= MAX_DIE; i++) {\r\n//         for(let j = 1; j <= MAX_DIE; j++) {\r\n//             for(let k = 1; k <= MAX_DIE; k++) {\r\n//                 for(let l = 1; l <= MAX_DIE; l++) {\r\n//                     const curResult = i + j + k + l;\r\n//                     const curCount = counts.get(curResult) || 0;\r\n//                     counts.set(curResult, curCount + 1);\r\n//                 }\r\n//             }\r\n//         }\r\n//     }\r\n//     const probabilities = new Map();\r\n//     for( const [value, count] of counts.entries()) {\r\n//         probabilities.set(value, count / ( MAX_DIE ^ 4));\r\n//     }\r\n//     return probabilities;\r\n// }\r\n\r\nfunction produceResultsSemiIterative(currentDicePool, definitions) {\r\n    const dice = currentDicePool.diceCounts;\r\n    if(dice.length === 0) {\r\n        throw new Error(\"Attempting to calculate probabilities with no dice\")\r\n    }\r\n    let probabilities;\r\n    let iterations = 0;\r\n    const flattenedDice = dice.filter( ({ count, name}) => {\r\n        return count > 0 && definitions.has(name);\r\n    }).reduce( (accumulator,  {count, name}) => {\r\n        const curDefinition = definitions.get(name);\r\n        return accumulator.concat( new Array(count).fill(curDefinition) );\r\n    }, [] );\r\n    //TODO: Redo as a .reduce instead of a forEach with external vars.\r\n    flattenedDice.forEach( (curDie, idx) => {\r\n        let newProbabilities = new Map();\r\n        const curDieFaceCount = curDie.countFaces();\r\n        const totalFaces = curDie.getNumFaces();\r\n        if(idx === 0) {\r\n            for(const faceCount of curDieFaceCount.values()) {\r\n                const { count : curFaceCount, dieFace } = faceCount;\r\n                const { primaryValue } = dieFace;\r\n                newProbabilities.set(primaryValue, curFaceCount / totalFaces);\r\n                iterations++;\r\n            }\r\n        }\r\n        else {\r\n            for( let [key, value] of probabilities.entries()) {\r\n                for(const faceCount of curDieFaceCount.values()) {\r\n                    const { count : curFaceCount, dieFace } = faceCount;\r\n                    const { primaryValue } = dieFace;\r\n                    const curDieFaceProbability = curFaceCount / totalFaces;\r\n                    iterations++;\r\n\r\n                    const existingProbability = value;\r\n                    const newValue = key + primaryValue;\r\n                    const newProbability = existingProbability *\r\n                        curDieFaceProbability;\r\n                    const probabilityThisStage = \r\n                        newProbabilities.get(newValue) || 0;\r\n                    newProbabilities.set(newValue, \r\n                        probabilityThisStage + newProbability);\r\n                }\r\n            }\r\n        }\r\n        probabilities = newProbabilities;\r\n    });\r\n\r\n    return probabilities;\r\n}\r\n\r\n","import ThresholdDieDefinition from \"../data_classes/ThresholdDieDefinition\"\r\nimport NumericDieDefinition from \"../data_classes/NumericDieDefinition\";\r\nimport DicePool from \"../data_classes/DicePool\";\r\nimport DiceCount from \"../data_classes/DiceCount\"\r\nimport { requestRecalculate } from \"./StatisticsActions\";\r\n\r\nexport const ADD_DIE_TO_POOL = 'ADD_DIE_TO_POOL';\r\nexport const REMOVE_DIE_FROM_POOL = 'REMOVE_DIE_FROM_POOL';\r\nexport const SAVE_CURRENT_POOL = 'SAVE_CURRENT_POOL';\r\nexport const CLEAR_COUNTS = 'CLEAR_COUNTS';\r\nexport const SET_CURRENT_POOL = 'SET_CURRENT_POOL'\r\n\r\nexport function initializeDicePools() {\r\n    //TODO: Try to load from webcache once implemented.\r\n\r\n    //Start out by defining predefined dice and mapping by key\r\n    const definitions = processDefaultDiceDefinitions();\r\n\r\n    const dicePools = new Map();\r\n    //Define a D&D pool containing 0 of each die from 4 to 100\r\n    const dndPool = defineDndPool(definitions);\r\n    dicePools.set(dndPool.name, dndPool);\r\n    const arkhamPool = defineArkhamPool(definitions);\r\n    dicePools.set(arkhamPool.name, arkhamPool);\r\n\r\n    const preset1 = dndPool.clone();\r\n    preset1.name = 'preset_1';\r\n\r\n    dicePools.set(preset1.name, preset1);\r\n\r\n    return {\r\n        diceDefinitions : definitions,\r\n        dicePools,\r\n        currentName : dndPool.name\r\n    };\r\n}\r\n\r\nexport function defineDndPool() {\r\n    const diceCounts = [4,6,8,10,12,20].map( entry => {\r\n        return new DiceCount({\r\n            count : 0,\r\n            name : `d${entry}`\r\n        })\r\n    });\r\n    return new DicePool({ diceCounts, \"name\" : \"D&D\"});\r\n}\r\n\r\nexport function defineArkhamPool(definitions) {\r\n    const diceCounts = Array.from(definitions.values()).filter( entry => {\r\n        return entry.name.includes(\"Arkham\")\r\n    }).map (entry => {\r\n        return new DiceCount({\r\n            count : 0,\r\n            name : `d${entry}`\r\n        })\r\n    });\r\n    return new DicePool({ diceCounts, name : \"Arkham\"});\r\n}\r\n\r\n/**\r\n * Returns a map of die definitions to their unique key.\r\n */\r\nexport function processDefaultDiceDefinitions() {\r\n    let defaultDefinitions = new Map();\r\n    defaultDefinitions = new Map([...defaultDefinitions, ...defineThresholdDice()]);\r\n    defaultDefinitions = new Map([...defaultDefinitions, ...defineBasicNumericDice()]);\r\n    return defaultDefinitions;\r\n}\r\n\r\n/**\r\n * Covers the d4/6/8/10/12/20/100. Nothing fancy here.\r\n */\r\nexport function defineBasicNumericDice() {\r\n    const result = new Map();\r\n    [4,6,8,10,12,20,100].forEach( entry => {\r\n        const definition = new NumericDieDefinition({ numSides : entry });\r\n        result.set(definition.name, definition);\r\n    });\r\n    return result;\r\n}\r\n\r\n/**\r\n * Defines some examples of dice that are basically numeric dice\r\n * but you need to roll \r\n */\r\nexport function defineThresholdDice() {\r\n    //For a start, only going to define a d6 that produces \"1\" on a 5 or a 6. i.e. arkham horror.\r\n    const result = new Map();\r\n    const arkhamD6 = new ThresholdDieDefinition({ name : 'ArkhamDie', numSides : 6, threshold : 5});\r\n    result.set(arkhamD6.name, arkhamD6);\r\n    const arkhamCurseD6 = new ThresholdDieDefinition({ name : 'ArkhamCurseDie', numSides : 6, threshold : 6});\r\n    result.set(arkhamCurseD6.name, arkhamCurseD6);\r\n    const arkhamBlessD6 = new ThresholdDieDefinition({ name : 'ArkhamBlessDie', numSides : 6, threshold : 4});\r\n    result.set(arkhamBlessD6.name, arkhamBlessD6);\r\n    return result;\r\n}\r\n\r\nfunction dispatchAddDieToPool(definition, count) {\r\n    return {\r\n        type : ADD_DIE_TO_POOL,\r\n        definition,\r\n        count\r\n    }\r\n}\r\n\r\nfunction dispatchSaveCurrentPool(newPoolName) {\r\n    return {\r\n        type : SAVE_CURRENT_POOL,\r\n        newPoolName\r\n    }\r\n}\r\n\r\nfunction dispatchClearCounts() {\r\n    return {\r\n        type : CLEAR_COUNTS\r\n    }\r\n}\r\n\r\nfunction dispatchSetCurrentPool(poolName) {\r\n    return {\r\n        type : SET_CURRENT_POOL,\r\n        poolName\r\n    }\r\n}\r\n\r\nfunction dispatchRemoveDieFromPool(definition, count) {\r\n    return {\r\n        type : REMOVE_DIE_FROM_POOL,\r\n        definition,\r\n        count\r\n    }\r\n}\r\n\r\nexport function requestAddDieToPool(definition, count) {\r\n    return (dispatch) => {\r\n        return Promise.resolve(dispatch(dispatchAddDieToPool(definition, count))).then( () => {\r\n            dispatch(requestRecalculate());\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestSaveCurrentPool(newPoolName) {\r\n    return (dispatch) => {\r\n        return Promise.resolve(dispatch(dispatchSaveCurrentPool(newPoolName)));\r\n    }\r\n}\r\n\r\nexport function requestSetCurrentPool(poolName) {\r\n    return (dispatch) => {\r\n        return Promise.resolve(dispatch(dispatchSetCurrentPool(poolName))).then( () => {\r\n            dispatch(requestRecalculate());\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestClearCounts() {\r\n    return (dispatch) => {\r\n        return Promise.resolve(dispatch(dispatchClearCounts()));\r\n    }\r\n}\r\n\r\nexport function requestRemoveDieToPool(definition, count) {\r\n    return (dispatch) => {\r\n        return Promise.resolve(dispatch(dispatchRemoveDieFromPool(definition, Math.abs(count)))).then( () => {\r\n            dispatch(requestRecalculate());\r\n        });\r\n    }\r\n}","import { Label, Icon } from \"semantic-ui-react\";\r\nimport React, { Component } from \"react\";\r\n\r\n\r\nexport default class NumberIncrementDecrementer extends Component {\r\n    render() {\r\n        const {onChange, value, min, max} = this.props;\r\n        return (\r\n        <div style={{textAlign : 'center'}}>\r\n            <Icon style={{display: 'inline-block'}} size='large' name='minus' onClick={ () => { if(value > min) onChange(value - 1) }}/>\r\n            <Label style={{display: 'inline-block'}} size='large' type=\"text\" className=\"number\">{value}</Label>\r\n            <Icon style={{display: 'inline-block'}} size='large' name='plus' onClick={ () => { if(value < max) onChange(value + 1) }}/>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Grid, Image, Label } from 'semantic-ui-react'\r\nimport NumberIncrementDecrementer from \"./NumberIncrementDecrementer\"\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nexport default class DiceChooserEntry extends Component {\r\n    render() {\r\n        const { image, count, name, onChangeCount } = this.props;\r\n        const DICE_COUNT_MAX = 12;\r\n        if(image) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Image \r\n                    src={image} \r\n                    onClick ={ () => { onChangeCount(count + 1)}} \r\n                    />\r\n                    <br/>\r\n                    <NumberIncrementDecrementer\r\n                        min={0}\r\n                        max={DICE_COUNT_MAX}\r\n                        value={count}\r\n                        onChange={onChangeCount}\r\n                    />\r\n                    <br/>\r\n                    <br/>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <React.Fragment>\r\n                    <Label onClick ={ () => { onChangeCount(count + 1)}} >{name}</Label>\r\n                    <br/>\r\n                    <NumberIncrementDecrementer \r\n                        min={0} \r\n                        max={DICE_COUNT_MAX} \r\n                        value={count} \r\n                        onChange={onChangeCount} />\r\n                    <br/>\r\n                    <br/>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Grid, Label, Button } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nexport default class DicePoolChooserComponent extends Component {\r\n    constructor() {\r\n        super();\r\n        this.getPresetName = this.getPresetName.bind(this);\r\n        this.isRowEnabled = this.isRowEnabled.bind(this);\r\n    }\r\n\r\n    getPresetName(rowNum) {\r\n        return `preset_${rowNum + 1}`;\r\n    }\r\n\r\n    isRowEnabled(rowNum) {\r\n        const name = this.getPresetName(rowNum);\r\n        return this.props.dicePools.has(name);\r\n    }\r\n\r\n    render() {\r\n        const NUM_PRESETS = 4;\r\n\r\n        return (\r\n                <div>\r\n                <button style={{width : '100%'}}\r\n                    onClick={() => { this.props.onClearCounts()} }\r\n                >Clear Counts</button>\r\n                <br/><br/>\r\n                <Label size=\"big\" style={{textDecoration: 'underline'}}>Presets</Label>\r\n                <br/><br/>\r\n                <Grid columns={NUM_PRESETS} divided style={{height: 100}}>\r\n                    {\r\n                        [...Array(NUM_PRESETS).keys()]\r\n                        .map( (rowNum, idx) => {\r\n                            const rowName = this.getPresetName(rowNum);\r\n                            const isRowEnabled = this.isRowEnabled(rowNum);\r\n                            return (\r\n                                <Grid.Column key={idx}>\r\n                                    <Grid.Row>\r\n                                        {idx + 1}\r\n                                    </Grid.Row>\r\n                                    <Grid.Row>\r\n                                        <Button\r\n                                            onClick={() => { this.props.onSetDicePool(rowName)} }\r\n                                            disabled={!isRowEnabled}\r\n                                        >Load</Button>\r\n                                    </Grid.Row>\r\n                                    <Grid.Row>\r\n                                        <Button\r\n                                            onClick={() => { this.props.onSaveDicePool(rowName)} }\r\n                                        >Save</Button>\r\n                                    </Grid.Row>\r\n                                </Grid.Column>\r\n                            )\r\n                        })\r\n                    }\r\n            </Grid>\r\n                </div>\r\n        )\r\n    }\r\n}","import { connect } from 'react-redux';\r\nimport { requestSetCurrentPool, requestSaveCurrentPool, requestClearCounts } from \"../actions/DiePoolActions\"\r\nimport DicePoolChooserComponent from \"../components/DicePoolChooserComponent\"\r\n\r\nfunction mapStateToProps(state) {\r\n    const {\r\n        dicePoolStore: { \r\n            currentDicePool,\r\n            currentDicePoolName,\r\n            dicePools\r\n         }\r\n    } = state;\r\n\r\n    return {\r\n        dicePool : currentDicePool,\r\n        currentDicePoolName,\r\n        dicePools\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        onSetDicePool : (poolName) => {\r\n            dispatch(requestSetCurrentPool(poolName));\r\n        },\r\n        onSaveDicePool : (poolName) => {\r\n            dispatch(requestSaveCurrentPool(poolName))\r\n        },\r\n        onClearCounts : () => {\r\n            dispatch(requestClearCounts());\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DicePoolChooserComponent);","import React, { Component } from \"react\";\r\nimport { Grid, Image } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport DiceChooseEntry from \"./DiceChooserEntry\"\r\nimport DicePoolChooserContainer from \"../containers/DicePoolChooserContainer\"\r\n\r\nexport default class DiceChooserComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChangeCount = this.onChangeCount.bind(this);\r\n    }\r\n\r\n    onChangeCount(name, countChange) {\r\n        console.log(`TCL: DiceChooserComponent -> onChangeCount -> countChange`, countChange)\r\n        console.log(`TCL: DiceChooserComponent -> onChangeCount -> name`, name)\r\n        const { definitions, onChangeCount } = this.props;\r\n        const definition = definitions.get(name);\r\n        onChangeCount(definition, countChange);\r\n    }\r\n\r\n    render() {\r\n        const { dicePool, definitions } = this.props;\r\n        const diceCounts = dicePool.diceCounts;\r\n\r\n        const row1 = diceCounts.slice();\r\n\r\n        return (\r\n            <Grid columns={2} divided style={{height : 60}}>\r\n                <Grid.Column width={8}>\r\n                    <Grid columns={diceCounts.length} divided style={{height: 40}}>\r\n                        <Grid.Row >\r\n                            {\r\n                                row1.map( (entry, idx) => {\r\n                                    const { name, count } = entry;\r\n                                    const image = definitions.get(name).image;\r\n                                    return (\r\n                                        <Grid.Column key={`die${idx}`}>\r\n                                            <DiceChooseEntry \r\n                                                image={image} \r\n                                                name={name}\r\n                                                count={count}\r\n                                                onChangeCount={ (newCount) => { this.onChangeCount(name, newCount - count) } }\r\n                                            />\r\n                                        </Grid.Column>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </Grid.Column>\r\n                <Grid.Column width={6}>\r\n                    <DicePoolChooserContainer/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        )\r\n    }\r\n}","import { connect } from 'react-redux';\r\nimport { requestAddDieToPool, requestRemoveDieToPool } from \"../actions/DiePoolActions\"\r\nimport DiceChooserComponent from \"../components/DiceChooserComponent\"\r\n\r\nfunction mapStateToProps(state) {\r\n    const {\r\n        dicePoolStore: { currentDicePool },\r\n        diceDefinitionStore : { definitions }\r\n    } = state;\r\n\r\n    return {\r\n        dicePool : currentDicePool,\r\n        definitions\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        onChangeCount : (definition, countChange) => {\r\n            if(countChange >= 1) {\r\n                return dispatch(requestAddDieToPool(definition, countChange));\r\n            }\r\n            else if(countChange < 0) {\r\n                return dispatch(requestRemoveDieToPool(definition, countChange));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DiceChooserComponent);","import React, { Component } from \"react\";\r\nimport { Grid, Button } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport {VerticalGridLines, HorizontalGridLines, LabelSeries, XAxis, XYPlot, YAxis, VerticalBarSeries} from 'react-vis';\r\n\r\nexport default class DiceChooserComponent extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        const { probabilities, cumulativeProbabilities, mode} = this.props;\r\n\r\n        const probabilitiesOfInterest = mode === 'cumulative' ? \r\n            cumulativeProbabilities : probabilities;\r\n\r\n        const labels = Array.from(\r\n            probabilitiesOfInterest.keys()).map( entry => { return entry});\r\n        const data = labels.sort( (a,b) => { return a < b ? -1 : 1 }).map( key => {\r\n            const value = probabilitiesOfInterest.get(key);\r\n            return {\r\n                x : key,\r\n                y : value * 100\r\n            };\r\n        });\r\n\r\n        const labelData = labels.sort( (a,b) => { return a < b ? -1 : 1 }).map( key => {\r\n            const value = probabilitiesOfInterest.get(key);\r\n            return {\r\n                x : key,\r\n                y : (value + .1) * 100,\r\n                xOffset : 20,\r\n                label : `${(value * 100).toFixed(1)}%`\r\n            };\r\n        });\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <XYPlot\r\n                yType=\"linear\"\r\n                xType=\"ordinal\"\r\n                height={300}\r\n                width={800}\r\n                >\r\n                  <LabelSeries\r\n                    animation\r\n                    allowOffsetToBeReversed\r\n                    data={labelData} \r\n                />\r\n                    <XAxis orientation=\"bottom\" />\r\n                    <YAxis/>\r\n                    <HorizontalGridLines />\r\n                    <VerticalGridLines />\r\n                    <VerticalBarSeries\r\n                    colorType=\"literal\"\r\n                    data={data}\r\n                    />\r\n                </XYPlot>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import { connect } from 'react-redux';\r\nimport StatsComponent from \"../components/StatsComponent\"\r\nimport { requestRecalculate } from '../actions/StatisticsActions';\r\n\r\nfunction mapStateToProps(state) {\r\n    const {\r\n        statisticsStore: { \r\n            isCalculationCurrent,\r\n            probabilities,\r\n            cumulativeProbabilities,\r\n            mode\r\n        }\r\n    } = state;\r\n\r\n    return {\r\n        isCalculationCurrent,\r\n        probabilities,\r\n        cumulativeProbabilities,\r\n        mode\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        onRequestRecalculate : () => {\r\n            return dispatch(requestRecalculate());\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StatsComponent);","import React from 'react';\nimport DiceChooserContainer from \"./containers/DiceChooserContainer\"\nimport StatsContainer from \"./containers/StatsContainer\"\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nfunction App() {\n\n    return (\n        <div>\n            <StatsContainer/>\n            <DiceChooserContainer/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_DIE_TO_POOL, REMOVE_DIE_FROM_POOL, CHOOSE_POOL_NAME, initializeDicePools, SAVE_CURRENT_POOL, CLEAR_COUNTS, SET_CURRENT_POOL } from \"../actions/DiePoolActions\";\r\nimport { coalesce } from \"../utils/GenericFunctions\";\r\n\r\nconst initializeState = () => {\r\n    const initializationResults = initializeDicePools();\r\n\r\n    const { dicePools, currentName} = initializationResults;\r\n\r\n    const currentPoolCopy = dicePools.get(currentName).clone();\r\n    return {\r\n        dicePools,\r\n        currentDicePoolName : currentName,\r\n        currentDicePool : currentPoolCopy\r\n    }\r\n}\r\n\r\nexport default function reduceDieSets(state, action) {\r\n\r\n    if(state === undefined) {\r\n        state = initializeState();\r\n    }\r\n\r\n    switch (action.type) {\r\n        case SAVE_CURRENT_POOL: {\r\n            const newPoolName = action.newPoolName;\r\n            const poolCopy = state.currentDicePool.clone();\r\n            poolCopy.name = newPoolName;\r\n            const updatedPools = new Map(state.dicePools);\r\n\r\n            updatedPools.set(newPoolName, poolCopy);\r\n            return {\r\n                ...state,\r\n                dicePools : updatedPools,\r\n                currentDicePoolName : newPoolName,\r\n                currentDicePool : poolCopy\r\n            }\r\n        }\r\n        case CLEAR_COUNTS: {\r\n            const updatedPool = state.currentDicePool.clone();\r\n            updatedPool.diceCounts = updatedPool.diceCounts.map( entry => {\r\n                const entryCopy = entry.clone();\r\n                entryCopy.count = 0;\r\n                return entryCopy;\r\n            })\r\n            return {\r\n                ...state,\r\n                currentDicePool : updatedPool\r\n            };\r\n        }\r\n        case SET_CURRENT_POOL: {\r\n            const { poolName } = action;\r\n            console.log(`TCL: reduceDieSets -> poolName`, poolName)\r\n            if( coalesce(poolName, '') === '' || !state.dicePools.has(poolName) ) {\r\n                console.error(`Could not find requested pool by name ${poolName}`);\r\n                return state;\r\n            }\r\n            const updatedPool = state.dicePools.get(poolName).clone();\r\n            console.log(`TCL: reduceDieSets -> updatedPool`, updatedPool)\r\n            return {\r\n                ...state,\r\n                currentDicePool : updatedPool,\r\n                currentDicePoolName : poolName\r\n            };\r\n        }\r\n        case ADD_DIE_TO_POOL: {\r\n            const updatedDicePool = state.currentDicePool.clone();\r\n            updatedDicePool.addDice(action.definition, action.count);\r\n            return { \r\n                ...state, \r\n                currentDicePool : updatedDicePool\r\n            };\r\n        }\r\n        case REMOVE_DIE_FROM_POOL: {\r\n            const updatedDicePool = state.currentDicePool.clone();\r\n            updatedDicePool.removeDice(action.definition, action.count);\r\n            return { \r\n                ...state, \r\n                currentDicePool : updatedDicePool\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_STATISTICS, RESET_STATISTICS, requestRecalculate } from \"../actions/StatisticsActions\";\r\n\r\nconst initialState = {\r\n    isCalculationCurrent : false,\r\n    probabilities : new Map(),\r\n    cumulativeProbabilities : new Map(),\r\n    mode : 'cumulative'\r\n}\r\n\r\n\r\nexport default function reduceStatistics(state = initialState, action) {\r\n    let finalState = {\r\n        ...state\r\n    };\r\n    switch (action.type) {\r\n        case SET_STATISTICS:\r\n            finalState.probabilities = action.probabilities;\r\n            finalState.cumulativeProbabilities = action.cumulativeProbabilities;\r\n            finalState.isCalculationCurrent = true;\r\n            break;\r\n        case RESET_STATISTICS:\r\n            finalState = initialState;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return finalState;\r\n}","import ThresholdDieDefinition from \"../data_classes/ThresholdDieDefinition\"\r\nimport NumericDieDefinition from \"../data_classes/NumericDieDefinition\";\r\nimport DicePool from \"../data_classes/DicePool\";\r\n\r\nexport const ADD_DEFINITION = 'ADD_DEFINITION';\r\nexport const MODIFY_DEFINITION = 'MODIFY_DEFINITION';\r\nexport const DELETE_DEFINITION = 'DELETE_DEFINITION';\r\n\r\n","import { ADD_DEFINITION, MODIFY_DEFINITION, DELETE_DEFINITION } from \"../actions/DieDefinitionActions\";\r\nimport { initializeDicePools } from \"../actions/DiePoolActions\";\r\n\r\nconst initializeState = () => {\r\n\r\n    const initializationResults = initializeDicePools();\r\n\r\n    const definitions = initializationResults.diceDefinitions;\r\n    \r\n\r\n    return {\r\n        definitions\r\n    }\r\n}\r\n\r\nexport default function reduce(state, action) {\r\n\r\n    if(state === undefined) {\r\n        state = initializeState();\r\n    }\r\n\r\n    switch (action.type) {\r\n        case ADD_DEFINITION: //At present, addition and modify are effectively identical.\r\n        case MODIFY_DEFINITION:\r\n            const updatedDefinitions = new Map(state.definitions);\r\n            updatedDefinitions.set(action.definition.name, action.definition);\r\n            return {\r\n                ...state, \r\n                definitions : updatedDefinitions\r\n        };\r\n        case DELETE_DEFINITION:\r\n            const updatedDicePool = state.dicePool.clone();\r\n            updatedDicePool.removeDice(action.definition, action.count);\r\n            const updatedDicePools = new Map(state.dicePools);\r\n            updatedDicePools.set(state.currentDicePoolName, updatedDicePool);\r\n            return { \r\n                ...state, \r\n                currentDicePool : updatedDicePool,\r\n                dicePools : updatedDicePools\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport DiePoolReducer from './DicePoolReducer'\r\nimport StatisticsReducer from './StatisticsReducer'\r\nimport DiceDefinitionReducer from './DiceDefinitionReducer'\r\n\r\nexport default combineReducers({\r\n    dicePoolStore : DiePoolReducer,\r\n    diceDefinitionStore : DiceDefinitionReducer,\r\n    statisticsStore : StatisticsReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers/index.js';\nimport thunk from 'redux-thunk';\n\nexport const store = createStore(rootReducer,applyMiddleware(thunk));\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/d10.0480ec4a.svg\";"],"sourceRoot":""}